syntax = "proto3";
package transaction;
option go_package = "github.com/security-token/core/domain/schema";

import "schema/token.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message Transaction {
    
    /* factories/SecurityTokenFactory.sol */

    message SecurityTokenFactory {
        message DeployNewSecurityToken {
            string name = 1;
            string symbol = 2;
            uint64 granularity = 3;
            uint64 cap = 4;
            string admin = 5;
            string controller = 6;
            string issuer = 7;
            string redeemer = 8;
            string module_editor = 9;

            token.SecurityToken.Metadata metadata = 10;
        }
    }

    /* contracts/token/SecurityToken.sol */

    message SecurityToken {
        message BulkIssueByPartition {
            bytes partition = 1;
            repeated string tokenHolders = 2;
            repeated uint64 values = 3;
            bytes data = 4; 
        }

        message SetDocument {
            bytes documentName = 1;
            string uri = 2;
            bytes documentHash = 3;
        }

        message IssueByPartition {
            bytes partition = 1;
            string recipient = 2;
            uint64 amount = 3;
        }

        message RedeemByPartition {
            bytes partition = 1;
            uint64 value = 2;
            bytes data = 3;
        }

        message OperatorRedeemByPartition {
            bytes partition = 1;
            string tokenHolder = 2;
            uint64 value = 3;
            bytes data = 4;
            bytes operatorData = 5;
        }

        message RenounceControl {}

        message RenounceIssuance {}
    }

    /* contracts/token/Pausable.sol */
    
    message Pausable {
        message Pause {}

        message Unpause {}
    }

    /* contracts/token/Ownable.sol */ 

    message Ownable {
        message TransferOwnership {
            string newOwner = 1; 
        }
    }

    /* contracts/token/ERC1400Raw.sol */

    message ERC1400Raw {
        message AuthorizeOperator {
            string operator = 1;
        }

        message RevokeOperator {
            string operator = 1;
        }
    }

    /* contracts/token/ERC1400Partition.sol */ 

    message ERC1400Partition {
        message TransferByPartition {
            bytes partition = 1;
            string to = 2;
            uint64 value = 3;
            bytes calldata = 4;
        }

        message OperatorTransferByPartition {
            bytes partition = 1;
            string from = 2;
            string to = 3;
            uint64 value = 4;
            bytes data = 5;
            bytes operatorData = 6;
        }

        message AuthorizeOperatorByPartition {
            bytes partition = 1;
            string operator = 2;
        }

        message RevokeOperatorByPartition {
            bytes partition = 1;
            string operator = 2;
        }

        message TransferWithData {
            string to = 1;
            uint64 value = 2;
            bytes data = 3;
        }

        message TransferFromWithData {
            string from = 1;
            string to = 2;
            uint64 value = 3;
            bytes data = 4;
            bytes operatorData = 5;
        }
    }

    /* contracts/token/ERC1400ERC20.sol */
    
    message ERC1400ERC20 {
        message Transfer {
            string to = 1;
            uint64 value = 2;
        }

        message Approve {
            string spender = 1;
            uint64 value = 2;
        }

        message TransferFrom {
            string from = 1;
            string to = 2;
            uint64 value = 3;
        }
    }

    /* contracts/token/ERC1400Capped.sol */

    message ERC1400Capped {
        message SetCap {
            uint64 newCap = 1;
        }
    }

    /* contracts/token/Constrainable.sol */ 

    message Constrainable {
        message SetModulesByPartition {
            bytes partition = 1;
            repeated string newModules = 2;
        }
    }

    /* contracts/token/Administrable.sol */

    message Administrable {
        message AddRole {
            bytes role = 1;
            string account = 2;
        }

        message BulkAddRole {
            repeated bytes roles = 1;
            repeated string accounts = 2;
        }

        message RemoveRole {
            bytes role = 1;
            string account = 2;
        }

        message RenounceRole {
            bytes role = 1;
        }
    }

    /* contracts/constraints/SpendingLimitsConstraintModule.sol */ 
    
    message SpendingLimitsConstraintModule {
        message DeploySpendingLimitsConstraintModule{
            string tokenAddress = 1;
        }

        message AddTimelock {
            google.protobuf.Duration periodLength = 1;
            uint64 amountAllowed = 2;
        }

        message SetTimelock {
            uint64 index = 1;
            google.protobuf.Duration periodLength = 2;
            uint64 amountAllowed = 3;
        }

        message DeleteTimelock {
            uint64 index = 1;
        }        
    }
    
    /* contracts/constraints/TimeLockConstraintModule.sol */

    message TimeLockConstraintModule {
        message DeployTimeLockConstraintModule{
            string tokenAddress = 1;
        }

        message EditAmountTimeLock {
            string account = 1;
            google.protobuf.Timestamp time = 2;
            uint64 amount = 3;
        }

        message EditAccountTimeLock {
            string account = 1;
            google.protobuf.Timestamp time = 2;
        }

        message EditTimeLock {
            google.protobuf.Timestamp time = 1;
        }
    }
    
    /* contracts/constraints/VestingPeriodConstraintModule.sol */

    message VestingPeriodConstraintModule {
        message DeployVestingPeriodConstraintModule{
            string tokenAddress = 1;
        }

        message SetVestingOptions {
            google.protobuf.Timestamp vestingStart = 1;
            uint64 vestedFractionAfterStart = 2;
            uint64 vestingRatio = 3;
        }
    }

    /* contracts/constraints/WhitelistConstraintModule.sol */ 

    message WhitelistConstraintModule {
        message DeployWhitelistConstraintModule{
            string tokenAddress = 1;
        }

        message EditWhitelist {
            string account = 1;
            bool whitelisted = 2;
        }

        message BulkEditWhitelist {
            repeated string accounts = 1;
            bool whitelisted = 2;
        }
    }

    /* Metadata */ 
    message Metadata {
        string hash = 1;
        google.protobuf.Timestamp date = 2;
        string reverted = 3;
    }

    optional Metadata metadata = 1;
    string contract = 2;
    uint32 network = 3;

    oneof data {
        SecurityTokenFactory.DeployNewSecurityToken deployNewSecurityToken = 4;
        
        SecurityToken.BulkIssueByPartition bulkIssueByPartition = 5;
        SecurityToken.SetDocument setDocument = 6;
        SecurityToken.IssueByPartition issueByPartition = 7;
        SecurityToken.RedeemByPartition redeemByPartition = 8;
        SecurityToken.OperatorRedeemByPartition operatorRedeemByPartition = 9;
        SecurityToken.RenounceControl renounceControl = 10;
        SecurityToken.RenounceIssuance renounceIssuance = 11;
        
        Pausable.Pause pause = 12;
        Pausable.Unpause unpause = 13;

        Ownable.TransferOwnership transferOwnership = 14;
        
        ERC1400Raw.AuthorizeOperator authorizeOperator = 15;
        ERC1400Raw.RevokeOperator revokeOperator = 16;

        ERC1400Partition.TransferByPartition transferByPartition = 17;
        ERC1400Partition.OperatorTransferByPartition operatorTransferByPartition = 18;
        ERC1400Partition.AuthorizeOperatorByPartition authorizeOperatorByPartition = 19;
        ERC1400Partition.RevokeOperatorByPartition revokeOperatorByPartition = 20;
        ERC1400Partition.TransferWithData transferWithData = 21;
        ERC1400Partition.TransferFromWithData transferFromWithData = 22;

        ERC1400ERC20.Transfer transfer = 23;
        ERC1400ERC20.Approve approve = 24;
        ERC1400ERC20.TransferFrom transferFrom = 25;

        ERC1400Capped.SetCap setCap = 26;

        Constrainable.SetModulesByPartition setModulesByPartition = 27;

        Administrable.AddRole addRole = 28;
        Administrable.BulkAddRole bulkAddRole = 29;
        Administrable.RemoveRole removeRole = 30;
        Administrable.RenounceRole renounceRole = 31;

        SpendingLimitsConstraintModule.DeploySpendingLimitsConstraintModule deploySpendingLimitsConstraintModule = 32;
        SpendingLimitsConstraintModule.AddTimelock addTimelock = 33;
        SpendingLimitsConstraintModule.SetTimelock setTimelock = 34;
        SpendingLimitsConstraintModule.DeleteTimelock deleteTimelock = 35;

        TimeLockConstraintModule.DeployTimeLockConstraintModule deployTimeLockConstraintModule = 36;
        TimeLockConstraintModule.EditAmountTimeLock editAmountTimeLock = 37;
        TimeLockConstraintModule.EditAccountTimeLock editAccountTimeLock = 38;
        TimeLockConstraintModule.EditTimeLock editTimeLock = 39;

        VestingPeriodConstraintModule.DeployVestingPeriodConstraintModule deployVestingPeriodConstraintModule = 40;
        VestingPeriodConstraintModule.SetVestingOptions setVestingOptions = 41;

        WhitelistConstraintModule.DeployWhitelistConstraintModule deployWhitelistConstraintModule = 42;
        WhitelistConstraintModule.EditWhitelist editWhitelist = 43;
        WhitelistConstraintModule.BulkEditWhitelist bulkEditWhitelist = 44;
    }
}