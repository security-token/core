// source: proto/transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var proto_token_pb = require('../proto/token_pb.js');
goog.object.extend(proto, proto_token_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.transaction.DeployNewSecurityToken', null, global);
goog.exportSymbol('proto.transaction.IssueByPartition', null, global);
goog.exportSymbol('proto.transaction.Transaction', null, global);
goog.exportSymbol('proto.transaction.Transaction.DataCase', null, global);
goog.exportSymbol('proto.transaction.Transaction.Metadata', null, global);
goog.exportSymbol('proto.transaction.Transfer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.DeployNewSecurityToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.DeployNewSecurityToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.DeployNewSecurityToken.displayName = 'proto.transaction.DeployNewSecurityToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Transfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.Transfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Transfer.displayName = 'proto.transaction.Transfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.IssueByPartition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.IssueByPartition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.IssueByPartition.displayName = 'proto.transaction.IssueByPartition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.transaction.Transaction.oneofGroups_);
};
goog.inherits(proto.transaction.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Transaction.displayName = 'proto.transaction.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.transaction.Transaction.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.transaction.Transaction.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.transaction.Transaction.Metadata.displayName = 'proto.transaction.Transaction.Metadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.DeployNewSecurityToken.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.DeployNewSecurityToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.DeployNewSecurityToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.DeployNewSecurityToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    granularity: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cap: jspb.Message.getFieldWithDefault(msg, 4, 0),
    admin: jspb.Message.getFieldWithDefault(msg, 5, ""),
    controller: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 7, ""),
    redeemer: jspb.Message.getFieldWithDefault(msg, 8, ""),
    moduleEditor: jspb.Message.getFieldWithDefault(msg, 9, ""),
    metadata: (f = msg.getMetadata()) && proto_token_pb.SecurityToken.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.DeployNewSecurityToken}
 */
proto.transaction.DeployNewSecurityToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.DeployNewSecurityToken;
  return proto.transaction.DeployNewSecurityToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.DeployNewSecurityToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.DeployNewSecurityToken}
 */
proto.transaction.DeployNewSecurityToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGranularity(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCap(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmin(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setController(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedeemer(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleEditor(value);
      break;
    case 10:
      var value = new proto_token_pb.SecurityToken.Metadata;
      reader.readMessage(value,proto_token_pb.SecurityToken.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.DeployNewSecurityToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.DeployNewSecurityToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.DeployNewSecurityToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.DeployNewSecurityToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGranularity();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCap();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAdmin();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getController();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRedeemer();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getModuleEditor();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto_token_pb.SecurityToken.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 granularity = 3;
 * @return {number}
 */
proto.transaction.DeployNewSecurityToken.prototype.getGranularity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setGranularity = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 cap = 4;
 * @return {number}
 */
proto.transaction.DeployNewSecurityToken.prototype.getCap = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setCap = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string admin = 5;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string controller = 6;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getController = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setController = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string issuer = 7;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string redeemer = 8;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getRedeemer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setRedeemer = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string module_editor = 9;
 * @return {string}
 */
proto.transaction.DeployNewSecurityToken.prototype.getModuleEditor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.setModuleEditor = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional token.SecurityToken.Metadata metadata = 10;
 * @return {?proto.token.SecurityToken.Metadata}
 */
proto.transaction.DeployNewSecurityToken.prototype.getMetadata = function() {
  return /** @type{?proto.token.SecurityToken.Metadata} */ (
    jspb.Message.getWrapperField(this, proto_token_pb.SecurityToken.Metadata, 10));
};


/**
 * @param {?proto.token.SecurityToken.Metadata|undefined} value
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
*/
proto.transaction.DeployNewSecurityToken.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.DeployNewSecurityToken} returns this
 */
proto.transaction.DeployNewSecurityToken.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.DeployNewSecurityToken.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Transfer.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Transfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Transfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipient: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Transfer}
 */
proto.transaction.Transfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Transfer;
  return proto.transaction.Transfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Transfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Transfer}
 */
proto.transaction.Transfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Transfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Transfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Transfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string recipient = 1;
 * @return {string}
 */
proto.transaction.Transfer.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transfer} returns this
 */
proto.transaction.Transfer.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 amount = 2;
 * @return {number}
 */
proto.transaction.Transfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transfer} returns this
 */
proto.transaction.Transfer.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.IssueByPartition.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.IssueByPartition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.IssueByPartition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.IssueByPartition.toObject = function(includeInstance, msg) {
  var f, obj = {
    partition: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipient: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.IssueByPartition}
 */
proto.transaction.IssueByPartition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.IssueByPartition;
  return proto.transaction.IssueByPartition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.IssueByPartition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.IssueByPartition}
 */
proto.transaction.IssueByPartition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPartition(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipient(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.IssueByPartition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.IssueByPartition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.IssueByPartition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.IssueByPartition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartition();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipient();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string partition = 1;
 * @return {string}
 */
proto.transaction.IssueByPartition.prototype.getPartition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.IssueByPartition} returns this
 */
proto.transaction.IssueByPartition.prototype.setPartition = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string recipient = 2;
 * @return {string}
 */
proto.transaction.IssueByPartition.prototype.getRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.IssueByPartition} returns this
 */
proto.transaction.IssueByPartition.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 amount = 3;
 * @return {number}
 */
proto.transaction.IssueByPartition.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.IssueByPartition} returns this
 */
proto.transaction.IssueByPartition.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.transaction.Transaction.oneofGroups_ = [[4,5,6]];

/**
 * @enum {number}
 */
proto.transaction.Transaction.DataCase = {
  DATA_NOT_SET: 0,
  DEPLOYNEWSECURITYTOKEN: 4,
  TRANSFER: 5,
  ISSUEBYPARTITION: 6
};

/**
 * @return {proto.transaction.Transaction.DataCase}
 */
proto.transaction.Transaction.prototype.getDataCase = function() {
  return /** @type {proto.transaction.Transaction.DataCase} */(jspb.Message.computeOneofCase(this, proto.transaction.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && proto.transaction.Transaction.Metadata.toObject(includeInstance, f),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    network: jspb.Message.getFieldWithDefault(msg, 3, 0),
    deploynewsecuritytoken: (f = msg.getDeploynewsecuritytoken()) && proto.transaction.DeployNewSecurityToken.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.transaction.Transfer.toObject(includeInstance, f),
    issuebypartition: (f = msg.getIssuebypartition()) && proto.transaction.IssueByPartition.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Transaction;
  return proto.transaction.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Transaction}
 */
proto.transaction.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.transaction.Transaction.Metadata;
      reader.readMessage(value,proto.transaction.Transaction.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNetwork(value);
      break;
    case 4:
      var value = new proto.transaction.DeployNewSecurityToken;
      reader.readMessage(value,proto.transaction.DeployNewSecurityToken.deserializeBinaryFromReader);
      msg.setDeploynewsecuritytoken(value);
      break;
    case 5:
      var value = new proto.transaction.Transfer;
      reader.readMessage(value,proto.transaction.Transfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 6:
      var value = new proto.transaction.IssueByPartition;
      reader.readMessage(value,proto.transaction.IssueByPartition.deserializeBinaryFromReader);
      msg.setIssuebypartition(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.transaction.Transaction.Metadata.serializeBinaryToWriter
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetwork();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDeploynewsecuritytoken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.transaction.DeployNewSecurityToken.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.transaction.Transfer.serializeBinaryToWriter
    );
  }
  f = message.getIssuebypartition();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.transaction.IssueByPartition.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.transaction.Transaction.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.transaction.Transaction.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.transaction.Transaction.Metadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    reverted: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.transaction.Transaction.Metadata}
 */
proto.transaction.Transaction.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.transaction.Transaction.Metadata;
  return proto.transaction.Transaction.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.transaction.Transaction.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.transaction.Transaction.Metadata}
 */
proto.transaction.Transaction.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReverted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.transaction.Transaction.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.transaction.Transaction.Metadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.transaction.Transaction.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.transaction.Transaction.Metadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReverted();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.transaction.Transaction.Metadata.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction.Metadata} returns this
 */
proto.transaction.Transaction.Metadata.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp date = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.transaction.Transaction.Metadata.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.transaction.Transaction.Metadata} returns this
*/
proto.transaction.Transaction.Metadata.prototype.setDate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction.Metadata} returns this
 */
proto.transaction.Transaction.Metadata.prototype.clearDate = function() {
  return this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.Metadata.prototype.hasDate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string reverted = 3;
 * @return {string}
 */
proto.transaction.Transaction.Metadata.prototype.getReverted = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction.Metadata} returns this
 */
proto.transaction.Transaction.Metadata.prototype.setReverted = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Metadata metadata = 1;
 * @return {?proto.transaction.Transaction.Metadata}
 */
proto.transaction.Transaction.prototype.getMetadata = function() {
  return /** @type{?proto.transaction.Transaction.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.transaction.Transaction.Metadata, 1));
};


/**
 * @param {?proto.transaction.Transaction.Metadata|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.transaction.Transaction.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 network = 3;
 * @return {number}
 */
proto.transaction.Transaction.prototype.getNetwork = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DeployNewSecurityToken deployNewSecurityToken = 4;
 * @return {?proto.transaction.DeployNewSecurityToken}
 */
proto.transaction.Transaction.prototype.getDeploynewsecuritytoken = function() {
  return /** @type{?proto.transaction.DeployNewSecurityToken} */ (
    jspb.Message.getWrapperField(this, proto.transaction.DeployNewSecurityToken, 4));
};


/**
 * @param {?proto.transaction.DeployNewSecurityToken|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setDeploynewsecuritytoken = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.transaction.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearDeploynewsecuritytoken = function() {
  return this.setDeploynewsecuritytoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasDeploynewsecuritytoken = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Transfer transfer = 5;
 * @return {?proto.transaction.Transfer}
 */
proto.transaction.Transaction.prototype.getTransfer = function() {
  return /** @type{?proto.transaction.Transfer} */ (
    jspb.Message.getWrapperField(this, proto.transaction.Transfer, 5));
};


/**
 * @param {?proto.transaction.Transfer|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.transaction.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional IssueByPartition issueByPartition = 6;
 * @return {?proto.transaction.IssueByPartition}
 */
proto.transaction.Transaction.prototype.getIssuebypartition = function() {
  return /** @type{?proto.transaction.IssueByPartition} */ (
    jspb.Message.getWrapperField(this, proto.transaction.IssueByPartition, 6));
};


/**
 * @param {?proto.transaction.IssueByPartition|undefined} value
 * @return {!proto.transaction.Transaction} returns this
*/
proto.transaction.Transaction.prototype.setIssuebypartition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.transaction.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.transaction.Transaction} returns this
 */
proto.transaction.Transaction.prototype.clearIssuebypartition = function() {
  return this.setIssuebypartition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.transaction.Transaction.prototype.hasIssuebypartition = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.transaction);
